clc

clear all;

close all;

addpath('support')

 

% load the trainded images

cd TRAIN

jpgFiles = dir('*.jpg*');

numFiles1 = length(jpgFiles);

Im1 = cell(1,numFiles1);

figure('Name','Trained Images');

% mydata = zeros(numFiles);

for k = 1:numFiles1

    Im1{k} = imread(jpgFiles(k).name);

     mean_1 = sum(sum(mean(Im1{k})))./10^3;

    std_dev= std2(Im1{k});

    entropy_1=entropy(Im1{k});

 

  fv2=[ mean_1 std_dev entropy_1];  

 

end

cd ..

for k = 1:numFiles1

   subplot(3,4,k);imshow(Im1{k});

  

end

 

  

 

% rw=ceil(size(Xtrain)/3);

% for ii=1:length(Img)

%     Im{ii}=Xtrain(ii);

%     subplot(rw,3,ii);imshow(Im{ii},[]);   

% end

 

% load the testing images

cd TESTING

jpgFiles = dir('*.jpg');

numFiles2 = length(jpgFiles);

Im2 = cell(1,numFiles2);

figure('Name','TESTING Images');

% mydata = zeros(numFiles);

for k = 1:numFiles2

    Im2{k} = imread(jpgFiles(k).name);

end

cd ..

for k = 1:numFiles2

   subplot(3,2,k);imshow(Im2{k});

end

 

 

 

%

% Ig=Xtest;

% figure('Name','Testing Query Image');

% rc=ceil(size(Ig,1)/3);

% for ii=1:size(Ig,1)

%     Ic{ii}=mat2gray(reshape(Ig(ii,:),[80 100]));

%     subplot(rw,3,ii);imshow(Ic{ii},[]);   

% end

 

% == create a multi level stack dae ====

 hiddenSize1 = 100;

 autoenc1 = trainAutoencoder(numFiles1,round(sum(fv2)), ...

     'MaxEpochs',150, ...

     'L2WeightRegularization',0.004, ...

     'SparsityRegularization',4, ...

     'SparsityProportion',0.25, ...

     'ScaleData', false);

 view(autoenc1)

%  figure,plotWeights(autoenc1);

 

feat1 = encode(autoenc1,numFiles1);

hiddenSize2 = 50;

autoenc2 = trainAutoencoder(feat1,round(sum(fv2)), ...

    'MaxEpochs',150, ...

    'L2WeightRegularization',0.002, ...

    'SparsityRegularization',4, ...

    'SparsityProportion',0.2, ...

    'ScaleData', false);

 

feat2 = encode(autoenc2,feat1);

softnet = trainSoftmaxLayer(feat2,numFiles1,'MaxEpochs',150);

view(softnet)

 

% create  a stack deep auto encoder

 

deepnet = stack(autoenc1,autoenc2,softnet);

 

 

 

%=== For classification =======

imageWidth = 256;

imageHeight = 256;

inputSize = imageWidth*imageHeight;

% xTest = zeros(inputSize,numel(Im2));

% for k = 1:numel(k)

%     xTest(k) = Im2{k};

% end

for k = 1:numFiles2

   xTest=(Im2{k});

   subplot(3,3,k);imshow( xTest);

    break

end

 

% with a deep neural netwrok

y = deepnet(numel(xTest));